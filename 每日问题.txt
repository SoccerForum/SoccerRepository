2019/2/20
1.TestDao.xml中的14行查询没有加入league的信息
2.继承GenericDao接口的时候，在Member.java中加了implements Serializable
问题：
1.mybatis-generator自动生成的.xml文件中并没有采用表连接的查询方式，而且看上去有些复杂，是采用然后在加上一些方法，
还是全部都由自己来写实用一些呢
2019/2/21
问题：
1.找不到.xml的位置，不在同一个文件下，可以通过classpath*:或/加文件路径
文件路径前不加/默认在同一个文件夹下，加上/表示在根目录下的文件
2.org.springframework.test.context.transaction.
添加jdbc和tx依赖
3.org.springframework.jdbc.CannotGetJdbcConnectionException：failed to obtain jdbc connection
在pom.xml中加入5.x版本的MySQL connector依赖
2019/2/22
1.mybatis两次查询时，发现findbyid可以正常获取数据库信息，而findbyName返回值却为空，如果是两种查询方式都为空的话，最有可能是字段类型不匹配，但是findbyid可以正常显示，说明是name的值没有传到xml文件，这时候去查看dbconfig.properties文件，会发现在url缺少了useUnicode=true&characterEncoding=utf-8，就会导致汉字不能正常的传递。
2.使用表连接查询的时候，在字段对应的时候，如果名字一致，可以在resultMap和association或collection中加入autoMapping = "true",如果两个表中都有id，name属性，要通过别名的方法进行区分，然后在id column = "tid" property = "id" result column = "tname" property = "name" 如果不加automaping，就不能获取到对应的值，显示为空，如果同名的属性不加以区分，会默认获取第一个属性的值。
2019/2/25
1.Could not resolve resource location pattern [mybatis/mapper/*.xml]: ServletContext resource [/mybatis/mapper/] cannot be resolved to URL because it does not exist
在页面跳转的时候出现404的错误，eclipse给出的错误信息如上，意思是解析不了mybatis/mapper.xml文件，造成的原因是，我的路径写的是mybatis/mapper/*.xml,但是mybatis并不是在根目录下，所以在配置文件中<property name="mapperLocations" value="mybatis/mapper/*.xml" />这一行需要给成value=”classpath*:mybatis/mapper/*.xml表示扫描当前文件夹下所有的mybatis文件夹中xml文件“，就成功的解决了路径的问题。（困扰了自己三天的问题,应该好好反思）
学到的纠错方法：首先明白运行的顺序，先从web.xml拦截请求，然后在到config.xml扫描文件，进行视图解析，然后在跳转到指定的页面，先去查看controller中的方法能否得到应有的结果，如果没有问题，就去查看配置文件中的路径，挨个调试，知道解决问题。
2.还未解决的问题：login页面中的汉字不能传到数据库中
a.在方法中添加HttpServletRequest request,HttpServletResponse response，
调用request.setCharacterEncoding("utf-8");response.setCharacterEncoding("utf-8");然后用String name = request.getParameter("name");此时的name就不再显示乱码了。
b.web.xml配置编码过滤器解决中文乱码问题
3.需要在demo页面显示post的title属性，然后还需要在content页面显示post的所有信息，不知道怎么定义方法
将post用model.addattribute("post",post)传到前端，直接用${post.getTitle()}即可获得
2019/2/26
1.在navicat中可以成功查询所有数据，然而在eclipse中却只能显示部分
原因：多表联查会造成查询结果不按id顺序显示
改正：只查询post的title信息就不用多表联查的方法，单个表查询就可得到正确的结果
2.将得到的title显示到前端页面中，需要用数组进行传递，model.attribute只能传递实体类到前端，不知道怎么传递数组
解决办法：a.利用json数组的形式封装，然后在前端用js/ajax解析json数组
b.利用list，将数据add到list中，然后用model.attribute传到前端，然后用foreach的方法，进行迭代输出
注意：foreach需要导入jstl,standard的jar包，前面还要加入<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
需要解决的技术点：
1.点击帖子的title，转到帖子详情页面，并显示posts.title,context,浏览量的信息
怎么获取jsp的title
利用url传递参数的方法，将地址写为“content?name=${title}”,直接在controller层函数中调用name即可得到网页中title参数
2.怎么将posts转化成一个可以任意取属性的对象，并在适当的位置显示相应的值
解决方法：用el表达式获取post中的get方法，对于关联属性，通过get实体类再取属性
3.怎么实现将数据库中存取的图片的绝对路径转化为图片显示在jsp页面上
将图片的路径放到数据库中，用el表达式直接在jsp页面解析即可得到图片
***4.如果是帖子中既有文字又有图片，该怎么处理才能实现数据的正常显示
5.利用ajax实现点赞功能
将图片的id = "likenum"
ajax代码
<script type="text/javascript" src="js/jquery.min.js"></script>
  <script type="text/javascript">
  	$("#likenum").click(function (){
  		$.ajax({
			data:"${post.getTitle()}",
			url:"like",
			data:{"name":${post.getTitle()}}, 
			success:function(data) {
				var likenum=JSON.parse(data).likenum;//在接收服务器数据时一般是字符串。我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象
				console.log(JSON.parse(data));
				$("#like").text(likenum);//将span的id设为like，文本显示为likenum的值，实现不刷新点赞数加1	
			}
		});
  	});6-9
  </script>
controller代码
	@RequestMapping("/like")
	@ResponseBody（如果不加的话，返回的json字符串就会报get请求失败）
	public String toLike(String name){
		Post post = postDao.findByTitle(name);
		int res = visitDao.updateLikeById(post.getVisitid());
		System.err.println(res);
		Visit visit = visitDao.findById(post.getVisitid());
		int likenum = visit.getLike();
		Map< Object, Object> map=new HashMap<Object, Object>();
		map.put("likenum", likenum);
		Gson gson = new Gson();
		String jsString = gson.toJson(map);
		return jsString;
	}
6.需要在完成一个类似懂球帝的首页，和一个充值页面
***7.在帖子下方实现评论功能
8.在demo页实现帖子的分类显示
***9.点击不同的联赛实现帖子的筛选和球员的显示
完成了后台的筛选功能，还需要通过点击对应的标签，传递相应的参数值，然后在中间的div显示对应页面的信息，无论是参数还是页面都需要用到ajax。
2019/3/4
1.除了完成以上ajax页面的跳转，我还需要加入充值|赞赏功能。
2.在个人页面实现信息的获取和图片的上传
首先在pom.xml中增加commons-fileupload，javax.servlet-api两个依赖
在jsp页面添加layui.css，jquery.min.js,layui.all.js
核心代码：
<div class="layui-col-md3">
        
<div class="layui-upload layui-col-lg-offset2">
            
<div class="layui-upload-list">
                
<img class="layui-upload-img" id="demo1" src="*.jpg" style="width: 50%">
                <p id="demoText"></p>
               
	 <button type="button" class="layui-btn" id="test1">上传图片</button>
           
</div>
       
</div>
    
</div>
function部分
<script>
    
layui.use('upload', function(){
       
	 var $ = layui.jquery,upload = layui.upload;
        //普通图片上传
        var uploadInst = upload.render({
           
	 elem: '#test1',
            
	url: 'uploadHead.do',
           
	 before: function(obj){
                //预读本地文件示例，不支持ie8
                	obj.preview(function(index, file, result){
                   
	$('#demo1').attr('src', result); //图片链接（base64）
                
	});
            
	},
            
	done: function(res){
                
	//如果上传失败
               
	 if(res.code > 0){
                    
	return layer.msg('上传失败');
               
	 }
               
	 //上传成功
               
	 layer.msg("上传成功");
           
	 },
            
	error: function(){
                //演示失败状态，并实现重传
               
	 var demoText = $('#demoText');
                
	demoText.html('<span style="color: #FF5722;">上传失败</span> <a class="layui-btn layui-btn-xs demo-reload">重试</a>');
                demoText.find('.demo-reload').on('click', function(){
                    uploadInst.upload();
                
});
            
}
        
});
    
});

</script>
在spring-config.xml加入
<!--文件上传-->
<bean id="multipartResolver"class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="20971520"/>
    </bean>
最后在controller中完善跳转代码
3.首页实现球队信息的呈现和球员信息
4.ajax实现div内容的替换
<script type="text/javascript" src="js/jquery.min.js"></script>
  <script type="text/javascript">
  	$("#1").click(function (){
  		$.ajax({
			type:"POST",
			url:"category",
			data:{"categoryid":1}, 
			success:function(data) {
				//alert(data);
				var a=JSON.parse(data);
				var bli=$("<a></a>");
				for(var i = 0;i<a.length;i++){
					console.log(a[i].title);
					var li= '<a href = content?title=' +a[i].title+ '>'+a[i].title+'</a>';
					//console.log(li);
					bli.append(li);
				}
				//console.log(bli);
				$("#aaaa").replaceWith(bli);
			}
		});
  	});
  </script>
类似实现页面不跳转，内容筛选后重新显示，最后通过不同的jsp页面跳转实现

（帮别人解决顺便回顾）项目运行出现404的错误：
5.org.xml.sax.SAXParseException文件提前结束，一般不是配置文件的问题，出现的原因可能是mapper/*.xml中的sql语句有问题，会提示sqlsessionfactory创建失败，最简单直接的办法就是在testDao中测试，将sql语句在navicat运行测试
6.如果测试的过程中出现了*.xml出现问题，除了检查sql语句之外，还要注意mapper namespace的路径是否正确。
3/5
1.收藏帖子，将前端的帖子题目与用户id传到后台，判断是否收藏，没有的话加入到收藏表中，最后在个人空间页面展示
2.在页面显示文字与图片，只需要将<img src = "图片路径">代替原来位置的图片，就可以实现原来的显示效果